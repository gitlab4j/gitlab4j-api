
plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.2.0'
    id 'maven-publish'
    id 'org.jreleaser' version '1.19.0'
    id 'net.researchgate.release' version '3.1.0'
}

wrapper {
    gradleVersion = '8.10.1'
}

String groupId = 'org.gitlab4j'
group = groupId

def repositoryPath = 'build/staging-deploy'

dependencies {
    api 'jakarta.activation:jakarta.activation-api:1.2.2'
    api 'org.glassfish.jersey.inject:jersey-hk2:2.39.1'
    api 'org.glassfish.jersey.core:jersey-client:2.39.1'
    api 'org.glassfish.jersey.connectors:jersey-apache-connector:2.39.1'
    api 'org.glassfish.jersey.media:jersey-media-multipart:2.39.1'
    api 'org.glassfish.jersey.media:jersey-media-json-jackson:2.39.1'
    api 'jakarta.servlet:jakarta.servlet-api:4.0.4'
    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.4.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'uk.org.webcompere:system-stubs-jupiter:1.2.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.4"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.4"
}

java {
    withJavadocJar()
    withSourcesJar()

    compileJava.options.encoding = "UTF-8"
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

spotless {
    java {
        palantirJavaFormat()
        importOrder 'java', 'javax', 'jakarta', 'org', 'com', ''
        removeUnusedImports()
    }
}

jreleaser {
    signing {
        active = 'RELEASE'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                gitlab4j {
                    active = 'RELEASE'
                    namespace = 'org.gitlab4j'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository(repositoryPath)
                    retryDelay = 30
                    maxRetries = 150
                }
            }
        }
    }
    release {
        github {
            enabled = true
            repoOwner = "$githubRepositoryOwner"
            name = "$githubRepositoryName"
            tagName = '{{projectVersion}}'
            overwrite = true
            skipTag = true
            releaseNotes {
                enabled = true
            }
            changelog {
                enabled = false
            }
            milestone {
                close = true
            }
            issues {
                enabled = true
                comment = 'This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'

                label {
                    name = 'released'
                    color = '#FF0000'
                    description = 'Issue has been released'
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'GitLab4J-API - GitLab API Java Client'
                description = 'GitLab4J-API (gitlab4j-api) provides a full featured Java client library for working with GitLab repositories and servers via the GitLab REST API.'
                packaging = 'jar'
                url = 'https://' + "$githubRepositoryOwner" + '.github.io/' + "$githubRepositoryName" + '/'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
                developers {                                   
                    developer {
                        id = 'gmessner'
                        name =  'Greg Messner'
                        email = 'greg@messners.com'
                    }
                    developer {
                        id = 'gdesaintmartinlacaze'
                        name =  'Gautier de Saint Martin Lacaze'
                        email = 'gautier@jabby-techs.fr'
                    }
                    developer {
                        url = 'https://github.com/orgs/' + "$githubRepositoryOwner" + '/people'
                        id = "$githubRepositoryOwner"
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    developerConnection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    url = 'https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '/'
                }
            }
            from components.java
        }
    }
    publishing {
        repositories {
            maven {
                url = rootProject.file(repositoryPath)
            }
        }
    }
}

release {
    buildTasks = [
        'checkLastVersionValue',
        'clean',
        'publish',
        'jreleaserDeploy'
    ]
    git {
        requireBranch.set('5.x.x')
    }
}

def checkLastVersionValueTask = tasks.register('checkLastVersionValue') {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        def newVersion = project.findProperty('release.releaseVersion') ?: version.replace('-SNAPSHOT', '')
        content = content.replaceAll("lastVersion=[0-9a-z\\.\\-]+", "lastVersion=" + newVersion)
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
}
